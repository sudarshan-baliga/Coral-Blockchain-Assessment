{"version":3,"sources":["Components/Form/Form.js","ServerRequests/userRequest.js","Components/Search/Search.js","Components/MainPage/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["AddUser","react_default","a","createElement","react","className","TextField_default","error","this","props","userNameValid","label","type","autoComplete","value","userName","onChange","handleInputChange","passwordValid","password","emailValid","email","phoneValid","phone","Button_default","variant","color","onClick","submitForm","Snackbar_default","anchorOrigin","horizontal","vertical","open","snackShow","autoHideDuration","onClose","hideSnack","message","id","snackMessage","snackClass","Component","URL","Search","searchEmailValid","search","state","searchEmail","formValid","fields","errMessages","errMsg","field","event","_this","setState","Object","defineProperty","target","validate","Promise","resolve","reject","regex","map","_this$setState2","fieldValidity","match","reason","then","result","userData","reqUrl","body","fetch","method","headers","Content-Type","JSON","stringify","res","json","catch","err","console","log","insertUsr","response","searchUser","exists","data","emailId","phoneNo","Search_Search_Search","Form_AddUser","assign","App","MainPage_AddUser","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7abf3195.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport \"./Form.css\";\n\n// form structure\nexport default class AddUser extends Component {\n    render() {\n        return (\n            <Fragment>\n                <form className=\"formContainer\">\n                    <TextField\n                        error={!this.props.userNameValid}\n                        label=\"User name\"\n                        type=\"text\"\n                        autoComplete=\"current-password\"\n                        className=\"inpField\"\n                        value={this.props.userName}\n                        onChange={this.props.handleInputChange(\"userName\")}\n                    />\n                    <TextField\n                        error={!this.props.passwordValid}\n                        label=\"Password\"\n                        type=\"password\"\n                        className=\"inpField\"\n                        value={this.props.password}\n                        onChange={this.props.handleInputChange(\"password\")}\n                    />\n                    <TextField\n                        error={!this.props.emailValid}\n                        label=\"Email id\"\n                        type=\"email\"\n                        className=\"inpField\"\n                        value={this.props.email}\n                        onChange={this.props.handleInputChange(\"email\")}\n                    />\n                    <TextField\n                        error={!this.props.phoneValid}\n                        label=\"Phone number\"\n                        type=\"tel\"\n                        className=\"inpField\"\n                        value={this.props.phone}\n                        onChange={this.props.handleInputChange(\"phone\")}\n                    />\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.props.submitForm} >\n                        Insert/Update\n                </Button>\n\n                </form>\n                <Snackbar\n                    anchorOrigin={{ horizontal: \"left\", vertical: \"top\" }}\n                    open={this.props.snackShow}\n                    autoHideDuration={10000}\n                    onClose={this.props.hideSnack}\n                    message={<span id=\"snackMsg\">{this.props.snackMessage}</span>}\n                    className={ \"snackBar \" + this.props.snackClass } \n                />\n            </Fragment>\n        )\n    }\n}","const URL = \"http://localhost:3001/user\"\n\nexport function insertUsr(userData) {\n    let reqUrl = URL + \"/insertUser\";\n    let body = {\n        userName: userData.userName,\n        email: userData.email,\n        phone: userData.phone,\n        password: userData.password\n    };\n    return new Promise((resolve, reject) => {\n        fetch(reqUrl, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        }).then(res => {\n            res.json().then(json => {\n                resolve(json);\n            });\n        }).catch(err => {\n            console.log(err);\n            reject(\"error in comunicating with server\");\n        })\n    });\n}\n\nexport function searchUser(userData) {\n    let reqUrl = URL + \"/searchUser\";\n    let body = {\n        email: userData.email,\n    };\n    console.log(\"body\", body);\n    return new Promise((resolve, reject) => {\n        fetch(reqUrl, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        }).then(res => {\n            res.json().then(json => {\n                resolve(json);\n            });\n        }).catch(err => {\n            console.log(err);\n            reject(\"error in comunicating with server\");\n        })\n    });\n}","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport \"./Search.css\";\n\nexport default class Search extends Component {\n    render() {\n        return (\n            <div className=\"searchContainer\">\n                <TextField\n                    error={!this.props.searchEmailValid}\n                    label=\"Enter email to be seached\"\n                    type=\"text\"\n                    autoComplete=\"current-password\"\n                    className=\"searchBar\"\n                    value={this.props.userName}\n                    onChange={this.props.handleInputChange(\"searchEmail\")}\n                />\n                <Button variant=\"contained\" color=\"primary\" onClick={this.props.search} >\n                    Search\n                </Button>\n            </div>\n        )\n    };\n}","import React, { Component } from 'react'\nimport \"./MainPage.css\";\nimport Form from \"../Form/Form\";\nimport { insertUsr, searchUser } from \"../../ServerRequests/userRequest\";\nimport SearchBar from \"../Search/Search\";\n\nexport default class AddUser extends Component {\n    // global state of this component\n    state = {\n        userNameValid: true,\n        emailValid: true,\n        searchEmailValid: true,\n        passwordValid: true,\n        phoneValid: true,\n        userName: \"\",\n        email: \"\",\n        searchEmail: \"\",\n        password: \"\",\n        phone: \"\",\n        formValid: false,\n        snackShow: true,\n        snackMessage: \"Search for the email and edit the form or directly insert data into the form\",\n        snackClass: \"greenBackground\"\n    };\n    //different fields in the form\n    fields = [\"email\", \"password\", \"phone\", \"userName\"];\n    //error messages to be shown in snackbar\n    errMessages = {\n        email: \"Email not valid\\n\",\n        phone: \"Phone number not valid (10 digits and no characters)\\n\",\n        password: \"password not valid (Must have 5+ symbols)\\n\",\n        userName: \"user name not valid (Must have 5+ symbols)\\n\"\n    }\n    //current error message\n    errMsg = \"\";\n\n    //called when the form input element value is changed\n    handleInputChange = field => event => {\n        this.setState({ [field]: event.target.value });\n    }\n\n    //validate all the fields of the form\n    //set state is asynchronous and taking time so used promise\n    validate = () => {\n        return new Promise((resolve, reject) => {\n            let regex = {\n                email: /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/,\n                phone: /^[0-9]{10}$/,\n                password: /(.....).*/,\n                userName: /[a-zA-Z0-9]{4,}/\n            }\n            this.errMsg = \"\";\n            this.fields.map(field => {\n                let res = this.state[field].match(regex[field])\n                let fieldValidity = field + \"Valid\";\n                if (!res) {\n                    this.errMsg += this.errMessages[field];\n                    this.setState({ [fieldValidity]: false, formValid: false, snackMessage: [this.errMsg] })\n                }\n                else\n                    this.setState({ [fieldValidity]: true });\n            });\n            resolve(\"success\");\n        });\n    }\n\n    //called after few seconds to do anything before closing snackbar\n    hideSnack = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        this.setState({ snackShow: false });\n    }\n\n    //called when submit button is pressed\n    submitForm = () => {\n        this.setState({ formValid: true, snackMessage: \"\", snackShow: false });\n        this.validate().then(result => {\n            if (this.state.formValid) {\n                let userData = {\n                    email: this.state.email,\n                    password: this.state.password,\n                    userName: this.state.userName,\n                    phone: this.state.phone\n                }\n                insertUsr(userData).then(response => {\n                    this.setState({ snackMessage: response.message, snackShow: true, snackClass: \"greenBackground\" });\n                }).catch(err => {\n                    console.log(err);\n                    this.setState({ snackMessage: \"could not talk to server\", snackShow: true, snackClass: \"redBackground\" })\n                })\n            }\n            else\n                this.setState({ snackShow: true, snackClass: \"redBackground\" });\n\n        })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    search = () => {\n        //validate the search email\n        if (!this.state[\"searchEmail\"].match(/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/)) {\n            this.setState({\n                snackShow: true,\n                snackClass: \"redBackground\",\n                snackMessage: \"search email not valid\",\n                searchEmailValid: false\n            });\n        }\n        else {\n            this.setState({ snackShow: false, searchEmailValid: true });\n            let userData = { email: this.state.searchEmail };\n            searchUser(userData).then((userData) => {\n                if (userData.exists) {\n                    this.setState({\n                        snackMessage: userData.message,\n                        snackShow: true,\n                        snackClass: \"greenBackground\",\n                        email: userData.data.emailId,\n                        password: userData.data.password,\n                        userName: userData.data.userName,\n                        phone: userData.data.phoneNo,\n                        emailValid: true,\n                        phoneValid: true,\n                        passwordValid: true,\n                        userNameValid: true\n                    })\n                }\n                else {\n                    this.setState({\n                        snackMessage: userData.message,\n                        snackShow: true,\n                        snackClass: \"redBackground\"\n                    })\n                }\n            }).catch((err) => {\n                console.log(err);\n                this.setState({ snackMessage: \"could not talk to server\", snackShow: true, snackClass: \"redBackground\" })\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"mainContainer\" >\n                <SearchBar\n                    search={this.search}\n                    handleInputChange={this.handleInputChange}\n                    searchEmailValid={this.state.searchEmailValid}\n                />\n                <Form\n                    {...this.state}\n                    handleInputChange={this.handleInputChange}\n                    hideSnack={this.hideSnack}\n                    validate={this.validate}\n                    submitForm={this.submitForm}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport MainPage from \"./Components/MainPage/MainPage\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <MainPage/>\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}